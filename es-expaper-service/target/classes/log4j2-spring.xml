<?xml version="1.0" encoding="UTF-8"?>

<!-- status : 指定log4j本身的打印日志的级别.ALL< Trace < DEBUG < INFO < WARN < ERROR
< FATAL < OFF。 monitorInterval : 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s. -->
<!--日志输出级别的控制有3处
1、在Configuration上，使用status,指定log4j本身的打印日志的级别
2、ThresholdFilter上，使用level，控制程序本身日志输出
3、logger上使用level ，控制程序本身日志输出,ThresholdFilter上与logger上的级别谁最小，使用谁！！！
-->
<Configuration status="INFO" monitorInterval="30">
    <Properties>
        <!-- 配置日志文件输出目录 如果值为${sys:user.home} 则是指当前用户的系统目录-->
        <Property name="LOG_HOME">logs/info</Property>
        <property name="ERROR_LOG_FILE_HOME">logs/error</property>
        <property name="WARN_LOG_FILE_HOME">logs/warn</property>
        <!-- 输出日志的格式 -->
        <!--
        %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
        %p : 日志输出格式
        %c : logger的名称
        %m或%msg : 日志内容，即 logger.info("message")
        %n : 换行符
        %C : Java类名
        %L : 日志输出所在行数
        %M : 日志输出所在方法名
        %-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补空格
        %logger 输出logger名称
        %t 输出当前线程名称
        -->
        <property name="PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t-%M-%L] %-5level %logger{36} - %m%n</property>
    </Properties>

    <Appenders>
        <!--
        有常见的 Console、RollingFile、File 三种子节点。
        -->
        <!--
        Console用于定义输出到控制台的 Appender。
        target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT。
        -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch)
            onMatch="ACCEPT" 表示匹配该级别及以上
            onMatch="DENY" 表示不匹配该级别及以上
            onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上
            onMismatch="ACCEPT" 表示匹配该级别以下
            onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的
            onMismatch="DENY" 表示不匹配该级别以下的
            -->
            <ThresholdFilter level="debug" onMatch="ACCEPT"
                             onMismatch="DENY" />
            <PatternLayout
                    pattern="${PATTERN}"/>
<!--            <HtmlLayout></HtmlLayout>-->
<!--            <JsonLayout></JsonLayout>-->


        </Console>

        <!--
        File用于定义输出到指定位置的文件的 Appender。
        文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
        <!--append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true -->
        <File name="log" fileName="logs/test.log" append="true">
            <PatternLayout
                    pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </File>
        <!--
        RollingFile定义指定方式触发新的 Appender。
        这个会打印出所有的info及以下级别的信息，每次大小超过size，
        则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 ，
        该日志文件将由filePattern属性指定新建日志文件的名称格式-->
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/info.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd-HH-mm}-%i.log">
            <!--ThresholdFilter是临界值过滤器，过滤掉低于指定临界值的日志。
            此时控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）
            -->
            <ThresholdFilter level="info" onMatch="ACCEPT"
                             onMismatch="DENY" />
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
            <Policies>
                <!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。 modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am. -->
                <!-- 关键点在于 filePattern后的日期格式，以及TimeBasedTriggeringPolicy的interval，
                日期格式精确到哪一位，interval也精确到哪一个单位 -->
                <!-- log4j2的按天分日志文件 : info-%d{yyyy-MM-dd}-%i.log-->
                <!-- log4j2的按分钟分日志文件 : info-%d{yyyy-MM-dd-HH-mm}-%i.log-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <!-- SizeBasedTriggeringPolicy:Policies子节点， 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小. -->
                 <SizeBasedTriggeringPolicy size="2 kB" />
            </Policies>
        </RollingFile>

        <RollingFile name="RollingFileWarn" fileName="${WARN_LOG_FILE_HOME}/warn.log"
                     filePattern="${WARN_LOG_FILE_HOME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="warn" onMatch="ACCEPT"
                             onMismatch="DENY" />
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
            <Policies>

                <SizeBasedTriggeringPolicy size="2 kB" />
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20" />
        </RollingFile>

        <RollingFile name="RollingFileError" fileName="${ERROR_LOG_FILE_HOME}/error.log"
                     filePattern="${ERROR_LOG_FILE_HOME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd-HH-mm}-%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT"
                             onMismatch="DENY" />
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
            <Policies>
                <!-- log4j2的按分钟 分日志文件 : error-%d{yyyy-MM-dd-HH-mm}-%i.log-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <!-- <SizeBasedTriggeringPolicy size="10 MB" /> -->
            </Policies>
        </RollingFile>

    </Appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <!--在logger中指明了level的同时，也在Appenders中定义level时，谁的级别设定高，那么
        日志的级别就是那个高的设定-->
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
<!--        <logger name="org.springframework" level="debug"></logger>-->
<!--        <logger name="org.mybatis" level="debug"></logger>-->

<!--        <logger name="org.hibernate" level="INFO"></logger>-->

        <!-- 第三方日志系统 -->
<!--        <logger name="org.springframework.core" level="info" />-->
<!--        <logger name="org.springframework.beans" level="info" />-->
<!--        <logger name="org.springframework.context" level="info" />-->
<!--        <logger name="org.springframework.web" level="info" />-->
<!--        <logger name="org.jboss.netty" level="warn" />-->
<!--        <logger name="org.apache.http" level="warn" />-->
<!--        <logger name="org.logicalcobwebs.proxool" level="info" />-->

        <!-- 配置com.trkj.test目录下日志输出，level为级别,additivity为false表示此loger
        的打印信息不再向上级传递，即不会传递到root，由root再次打印 ；即为true时会打印两次。
        如果这里没有进行配置，则默认就会使用root的配置，因此没有特殊要求时，无需配置该节点-->
        <logger name="com.trkj" level="debug" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
<!--        <logger name="org.mybatis" level="debug" additivity="false">-->
<!--            <AppenderRef ref="Console"/>-->
<!--        </logger>-->
        <logger name="org.apache.ibatis" level="DEBUG"/>
        <logger name="java.sql.Connection" level="DEBUG"/>
        <logger name="java.sql.Statement" level="DEBUG"/>
        <logger name="java.sql.PreparedStatement" level="DEBUG"/>
        <!-- 配置日志的根节点 -->
        <root level="debug">
            <appender-ref ref="Console"/>
<!--            <appender-ref ref="log"/>-->
<!--            <appender-ref ref="RollingFileInfo"/>-->
<!--            <appender-ref ref="RollingFileWarn"/>-->
<!--            <appender-ref ref="RollingFileError"/>-->
        </root>

    </Loggers>

</Configuration>